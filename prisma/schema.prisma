datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider             = "python3 -m prisma"
    interface            = "asyncio"
    recursive_type_depth = 3
}

model Member {
    id                    String  @id @default(uuid())
    tag                   String  @unique
    name                  String
    role                  Role
    trophies              Int
    clan_rank             Int
    previous_clan_rank    Int
    donations             Int
    donations_received    Int
    attack_wins           Int
    versus_trophies       Int
    capital_contributions Int
    war_stars             Int
    current_member        Boolean @default(true)

    last_active     DateTime @default(now())
    activity_hits   Int      @default(0)
    activity_misses Int      @default(0)

    Clan      Clan?           @relation(fields: [clanId], references: [id], onDelete: Cascade)
    clanId    String?
    WarAttack WarAttack[]
    clan_wars ClanWarMember[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
    MEMBER
    ELDER
    CO_LEADER
    LEADER
}

model Clan {
    id                String       @id @default(uuid())
    tag               String       @unique
    name              String
    level             Int
    type              ClanType
    description       String
    points            Int
    capital_points    Int
    required_trophies Int
    required_townhall Int
    war_frequency     WarFrequency
    war_win_streak    Int
    war_wins          Int
    war_ties          Int
    war_losses        Int
    member_count      Int

    members Member[]
    ClanWar ClanWar[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

enum ClanType {
    OPEN
    INVITE_ONLY
    CLOSED
}

enum WarFrequency {
    ALWAYS
    MORE_THAN_ONCE_PER_WEEK
    ONCE_PER_WEEK
    LESS_THAN_ONCE_PER_WEEK
    NEVER
}

model ClanWar {
    id                     String   @id @default(uuid())
    clan                   Clan     @relation(fields: [clanId], references: [id], onDelete: Cascade)
    clanId                 String
    opponent_tag           String
    preparation_start_time DateTime
    war_start_time         DateTime
    war_end_time           DateTime
    team_size              Int
    attacks_per_member     Int

    result    WarResult
    type      WarType
    WarAttack WarAttack[]
    members   ClanWarMember[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([clanId, preparation_start_time])
}

enum WarResult {
    WIN
    LOSS
    TIE
    IN_PROGRESS
}

enum WarType {
    RANDOM
    FRIENDLY
    LEAGUE
}

model WarAttack {
    id                     String @id @default(uuid())
    attacker_tag           String
    defender_tag           String
    stars                  Int
    destruction_percentage Float
    duration               Float
    order                  Int

    attacker   Member  @relation(fields: [attackerId], references: [id], onDelete: Cascade)
    attackerId String
    war        ClanWar @relation(fields: [warId], references: [id], onDelete: Cascade)
    warId      String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([attacker_tag, defender_tag, warId])
}

model ClanWarMember {
    // This is just a linking table to allow a many-to-many relationship between ClanWar and Member
    id String @id @default(uuid())

    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId String

    clanWar   ClanWar @relation(fields: [clanWarId], references: [id], onDelete: Cascade)
    clanWarId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([memberId, clanWarId])
}
